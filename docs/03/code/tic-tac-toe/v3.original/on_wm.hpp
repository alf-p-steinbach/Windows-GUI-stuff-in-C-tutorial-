#pragma once
#include "wrapped-windows-h.hpp"

// These signatures (modulo how types are specified) were comments in Microsoft's <windowsx.h>.
namespace on_wm {
    void Activate( HWND hwnd, UINT state, HWND hwndActDeact, bool fMinimized );
    void ActivateApp( HWND hwnd, bool fActivate, DWORD dwThreadId );
    void AskCBFormatName( HWND hwnd, int cchMax, char* rgchName );
    void CancelMode( HWND hwnd );
    void ChangeCBChain( HWND hwnd, HWND hwndRemove, HWND hwndNext );
    void Char( HWND hwnd, char ch, int cRepeat );
    auto CharToItem( HWND hwnd, UINT ch, HWND hwndListbox, int iCaret ) -> int;
    void ChildActivate( HWND hwnd );
    void Clear( HWND hwnd );
    void Close( HWND hwnd );
    void Command( HWND hwnd, int id, HWND hwndCtl, UINT codeNotify );
    void CommNotify( HWND hwnd, int cid, UINT flags );
    void Compacting( HWND hwnd, UINT compactRatio );
    auto CompareItem( HWND hwnd, const COMPAREITEMSTRUCT* pCompareItem ) -> int;
    void ContextMenu( HWND hwnd, HWND hwndContext, UINT xPos, UINT yPos );
    void Copy( HWND hwnd );
    auto Create( HWND hwnd, CREATESTRUCT* pCreateStruct ) -> bool;
    auto CtlColor( HWND hwnd, HDC hdc, HWND hwndChild, int type ) -> HBRUSH;
    void Cut( HWND hwnd );
    void DeadChar( HWND hwnd, char ch, int cRepeat );
    void DeleteItem( HWND hwnd, const DELETEITEMSTRUCT* pDeleteItem );
    void Destroy( HWND hwnd );
    void DestroyClipboard( HWND hwnd );
    auto DeviceChange( HWND hwnd, UINT uEvent, DWORD dwEventData ) -> bool;
    void DevModeChange( HWND hwnd, const char* pszDeviceName );
    void DisplayChange( HWND hwnd, UINT bitsPerPixel, UINT cxScreen, UINT cyScreen );
    void DrawClipboard( HWND hwnd );
    void DrawItem( HWND hwnd, const DRAWITEMSTRUCT* pDrawItem );
    void DropFiles( HWND hwnd, HDROP hdrop );
    void Enable( HWND hwnd, bool fEnable );
    void EndSession( HWND hwnd, bool fEnding );
    void EnterIdle( HWND hwnd, UINT source, HWND hwndSource );
    auto EraseBkgnd( HWND hwnd, HDC hdc ) -> bool;
    void FontChange( HWND hwnd );
    auto GetDlgCode( HWND hwnd, MSG* pmsg ) -> UINT;
    auto GetFont( HWND hwnd ) -> HFONT;
    void GetMinMaxInfo( HWND hwnd, MINMAXINFO* pMinMaxInfo );
    auto GetText( HWND hwnd, int cchTextMax, char* pszText ) -> int;
    auto GetTextLength( HWND hwnd ) -> int;
    void HotKey( HWND hwnd, int idHotKey, UINT fuModifiers, UINT vk );
    void HScroll( HWND hwnd, HWND hwndCtl, UINT code, int pos );
    void HScrollClipboard( HWND hwnd, HWND hwndCBViewer, UINT code, int pos );
    auto IconEraseBkgnd( HWND hwnd, HDC hdc ) -> bool;
    auto InitDialog( HWND hwnd, HWND hwndFocus, LPARAM lParam ) -> bool;
    void InitMenu( HWND hwnd, HMENU hMenu );
    void InitMenuPopup( HWND hwnd, HMENU hMenu, UINT item, bool fSystemMenu );
    void Key( HWND hwnd, UINT vk, bool fDown, int cRepeat, UINT flags );
    void Key( HWND hwnd, UINT vk, bool fDown, int cRepeat, UINT flags );
    void KillFocus( HWND hwnd, HWND hwndNewFocus );
    void LButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT keyFlags );
    void LButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT keyFlags );
    void LButtonUp( HWND hwnd, int x, int y, UINT keyFlags );
    void MButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT keyFlags );
    void MButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT keyFlags );
    void MButtonUp( HWND hwnd, int x, int y, UINT flags );
    void MeasureItem( HWND hwnd, MEASUREITEMSTRUCT* pMeasureItem );
    auto MenuChar( HWND hwnd, UINT ch, UINT flags, HMENU hmenu ) -> DWORD;
    void MenuSelect( HWND hwnd, HMENU hmenu, int item, HMENU hmenuPopup, UINT flags );
    auto MouseActivate( HWND hwnd, HWND hwndTopLevel, UINT codeHitTest, UINT msg ) -> int;
    void MouseMove( HWND hwnd, int x, int y, UINT keyFlags );
    void MouseWheel( HWND hwnd, int xPos, int yPos, int zDelta, UINT fwKeys );
    void Move( HWND hwnd, int x, int y );
    auto NCActivate( HWND hwnd, bool fActive, HWND hwndActDeact, bool fMinimized ) -> bool;
    auto NCCalcSize( HWND hwnd, bool fCalcValidRects, NCCALCSIZE_PARAMS* pcsp ) -> UINT;
    auto NCCreate( HWND hwnd, CREATESTRUCT* pCreateStruct ) -> bool;
    void NCDestroy( HWND hwnd );
    auto NCHitTest( HWND hwnd, int x, int y ) -> UINT;
    void NCLButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT codeHitTest );
    void NCLButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT codeHitTest );
    void NCLButtonUp( HWND hwnd, int x, int y, UINT codeHitTest );
    void NCMButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT codeHitTest );
    void NCMButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT codeHitTest );
    void NCMButtonUp( HWND hwnd, int x, int y, UINT codeHitTest );
    void NCMouseMove( HWND hwnd, int x, int y, UINT codeHitTest );
    void NCPaint( HWND hwnd, HRGN hrgn );
    void NCRButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT codeHitTest );
    void NCRButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT codeHitTest );
    void NCRButtonUp( HWND hwnd, int x, int y, UINT codeHitTest );
    auto NextDlgCtl( HWND hwnd, HWND hwndSetFocus, bool fNext ) -> HWND;
    void Paint( HWND hwnd );
    void PaintClipboard( HWND hwnd, HWND hwndCBViewer, const PAINTSTRUCT* pPaintStruct );
    void PaletteChanged( HWND hwnd, HWND hwndPaletteChange );
    void PaletteIsChanging( HWND hwnd, HWND hwndPaletteChange );
    void ParentNotify( HWND hwnd, UINT msg, HWND hwndChild, int idChild );
    void Paste( HWND hwnd );
    void Power( HWND hwnd, int code );
    auto QueryDragIcon( HWND hwnd ) -> HICON;
    auto QueryEndSession( HWND hwnd ) -> bool;
    auto QueryNewPalette( HWND hwnd ) -> bool;
    auto QueryOpen( HWND hwnd ) -> bool;
    void QueueSync( HWND hwnd );
    void Quit( HWND hwnd, int exitCode );
    void RButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT keyFlags );
    void RButtonDown( HWND hwnd, bool fDoubleClick, int x, int y, UINT keyFlags );
    void RButtonUp( HWND hwnd, int x, int y, UINT flags );
    void RenderAllFormats( HWND hwnd );
    auto RenderFormat( HWND hwnd, UINT fmt ) -> HANDLE;
    auto SetCursor( HWND hwnd, HWND hwndCursor, UINT codeHitTest, UINT msg ) -> bool;
    void SetFocus( HWND hwnd, HWND hwndOldFocus );
    void SetFont( HWND hwndCtl, HFONT hfont, bool fRedraw );
    void SetRedraw( HWND hwnd, bool fRedraw );
    void SetText( HWND hwnd, const char* pszText );
    void ShowWindow( HWND hwnd, bool fShow, UINT status );
    void Size( HWND hwnd, UINT state, int cx, int cy );
    void SizeClipboard( HWND hwnd, HWND hwndCBViewer, const RECT* prc );
    void SpoolerStatus( HWND hwnd, UINT status, int cJobInQueue );
    void SysChar( HWND hwnd, char ch, int cRepeat );
    void SysColorChange( HWND hwnd );
    void SysCommand( HWND hwnd, UINT cmd, int x, int y );
    void SysDeadChar( HWND hwnd, char ch, int cRepeat );
    void SysKey( HWND hwnd, UINT vk, bool fDown, int cRepeat, UINT flags );
    void SysKey( HWND hwnd, UINT vk, bool fDown, int cRepeat, UINT flags );
    void SystemError( HWND hwnd, int errCode );
    void TimeChange( HWND hwnd );
    void Timer( HWND hwnd, UINT id );
    void Undo( HWND hwnd );
    auto VkeyToItem( HWND hwnd, UINT vk, HWND hwndListbox, int iCaret ) -> int;
    void VScroll( HWND hwnd, HWND hwndCtl, UINT code, int pos );
    void VScrollClipboard( HWND hwnd, HWND hwndCBViewer, UINT code, int pos );
    void WindowPosChanged( HWND hwnd, const WINDOWPOS* pwpos );
    auto WindowPosChanging( HWND hwnd, WINDOWPOS* pwpos ) -> bool;
    void WinIniChange( HWND hwnd, const char* pszSectionName );
}  // namespace on_wm
